{"name":"Vagrant Examples","tagline":"Understand Vagrant through some simple examples","body":"## Welcome to Vagrant Examples\r\nVagrant examples is meant help someone new to Vagrant better understand what Vagrant is and what its features are.\r\n\r\n## What is Vagrant\r\nVagrant is a tool that interacts with a VM provider, like [VirtualBox](https://www.virtualbox.org/) or [Parallels](http://www.parallels.com/) to create and configure VMs, like configuring network adapters to use [NAT](http://en.wikipedia.org/wiki/Network_address_translation) or [Bridged](http://en.wikipedia.org/wiki/Bridging_(networking)). It then interacts with the newly created VM to provision the VM, like setting the hostname and IP address as well as installing software on the VM. Vagrant does this in an automated way and is meant to be version controlled along side source code.\r\n\r\n## What Vagrant is not\r\nVagrant is not a VM provider. It just interacts with a VM provider through that provider's APIs.\r\n\r\n## Use Cases\r\n\r\n#### Developer Environment\r\nVagrant can be used to create a developer environment to easily create the necessary build tools so that all developers have a consistent environment.\r\n\r\n#### Play with Technology\r\nVagrant can be used to play with interesting software, like [nginx](http://nginx.org/) or the [ELK stack](https://www.elastic.co/webinars/elk-stack-devops-environment). You can play with the software without having to worry about impacting your developer machine.\r\n\r\n#### Simulate environments\r\nVagrant can be used to simulate distributed environments. You can install a 3-node database cluster and simulate machines going up and down or partition machines from each other.\r\n\r\n## Still Interested? Let's Get Started\r\n\r\n### <a name=\"prereq\"></a>Pre-Requisite\r\nBefore creating the first VM, some initial setup needs to be done.\r\n\r\n1. Download/Install [Vagrant](http://www.vagrantup.com/downloads.html)\r\n2. Download/Install a VM Provider - e.g. [Virtualbox](https://www.virtualbox.org/wiki/Downloads) for Windows or [Parallels](http://www.parallels.com/products/desktop/download/) for Mac\r\n    \r\n    a. **(Parallels-Only)** Install the parallels plugin\r\n       \r\n        vagrant plugin install vagrant-parallels   \r\n    b. **(Parallels-Only)** Setting parallels as the default provider\r\n    \r\n        export VAGRANT_DEFAULT_PROVIDER=parallels\r\n        \r\n    Or add it to your ~/.bashrc\r\n    \r\n3. (Optional) Add the main box we will be using. This will speed up creating the initial VM.\r\n\r\n        $ vagrant box add boxcutter/centos71\r\n        NOTE: This will prompt you for the VM provider you are using. Enter the number based off what you installed in step #2 above.\r\n        \r\n        1) parallels\r\n        2) virtualbox\r\n        3) vmware_desktop\r\n        \r\n        Enter your choice: \r\n\r\n### Get Started\r\n\r\nClick on the Download link above to get some vagrant examples, and extract the contents into a folder. All examples below assume you are in the folder that has the LICENSE file.\r\n\r\n\r\n***\r\n\r\n### Example 1: Simple VM\r\nLet's create a Virtual Machine.\r\n\r\n    cd 1_simple\r\n    vagrant up\r\n\r\nVagrant will output some information\r\n\r\n````\r\n==> default: Importing base box 'boxcutter/centos71'...\r\n==> default: Matching MAC address for NAT networking...\r\n==> default: Checking if box 'boxcutter/centos71' is up to date...\r\n==> default: Setting the name of the VM: 1_simple_default_1432041878529_74810\r\n==> default: Fixed port collision for 22 => 2222. Now on port 2201.\r\n==> default: Clearing any previously set network interfaces...\r\n==> default: Preparing network interfaces based on configuration...\r\n    default: Adapter 1: nat\r\n==> default: Forwarding ports...\r\n    default: 22 => 2201 (adapter 1)\r\n==> default: Booting VM...\r\n==> default: Waiting for machine to boot. This may take a few minutes...\r\n    default: SSH address: 127.0.0.1:2201\r\n    default: SSH username: vagrant\r\n    default: SSH auth method: private key\r\n    default: Warning: Connection timeout. Retrying...\r\n    default:\r\n    default: Vagrant insecure key detected. Vagrant will automatically replace\r\n    default: this with a newly generated keypair for better security.\r\n    default:\r\n    default: Inserting generated public key within guest...\r\n    default: Removing insecure key from the guest if its present...\r\n    default: Key inserted! Disconnecting and reconnecting using new SSH key...\r\n==> default: Machine booted and ready!\r\n==> default: Checking for guest additions in VM...\r\n==> default: Mounting shared folders...\r\n    default: /vagrant => C:/temp/4BitBen-vagrant-examples-533ed11/1_simple\r\n````\r\n\r\nAnd now you have your first VM created. Your VM provider knows about this VM as well. Bring up the VM provider's GUI and look at the newly created VM.\r\n\r\nLet's break down how Vagrant created the VM. \r\n\r\n#### [Vagrantfile](http://docs.vagrantup.com/v2/vagrantfile/index.html)\r\n\r\nThe first thing that Vagrant needs is a Vagrantfile. A Vagrantfile is the main configuration item defining how to create the Virtual Machine - e.g. network settings, # of CPUs, Memory, etc. Vagrant looks in the current working directory for a Vagrantfile. Here is what our Vagrantfile looks like\r\n\r\n````\r\n# -*- mode: ruby -*-\r\n# vi: set ft=ruby :\r\n\r\nVagrant.configure(2) do |config|\r\n  config.vm.box = \"boxcutter/centos71\"\r\nend\r\n````\r\n\r\nThe only thing our Vagrantfile defines is the Box. Every Vagrantfile must define at least a Box.\r\n\r\n#### [Box](http://docs.vagrantup.com/v2/boxes.html)\r\n\r\nOnce Vagrant has found the Vagrantfile and reads it, it will try to download the Box. A box is a base image. Vagrant essentially uses the base image to quickly clone a virtual machine. By default, Vagrant looks locally to see if this box has already been downloaded. If not, Vagrant looks in [Vagrant Cloud](https://www.vagrantcloud.com) for the box and then downloads.\r\n\r\n    ==> default: Importing base box 'boxcutter/centos71'...\r\n\r\nDownloaded boxes are stored in \r\n\r\n    $HOME/.vagrant.d/boxes/<box_name>/<version>/<provider>. \r\n\r\nIf you look, it is an extremely small wrapper around how the Provider stores the Virtual Machine.\r\n\r\n#### Create and Configure VM\r\n\r\nOnce the box has been imported, the VM gets created and configured - e.g. network adapters are created and configured for the VM.\r\n\r\n````\r\n==> default: Setting the name of the VM: 1_simple_default_1432041878529_74810\r\n==> default: Fixed port collision for 22 => 2222. Now on port 2201.\r\n==> default: Clearing any previously set network interfaces...\r\n==> default: Preparing network interfaces based on configuration...\r\n    default: Adapter 1: nat\r\n==> default: Forwarding ports...\r\n    default: 22 => 2201 (adapter 1)\r\n````\r\n\r\nHere the VM is using Network Address Translation for its networking. It is also configuring the VM Provider to do Port Forwarding.\r\n\r\n#### Provision VM\r\n\r\nOnce the VM has been created and configured, it now gets provisioned - e.g. setting IP address(es), hostname, etc.\r\n\r\n````\r\n==> default: Booting VM...\r\n==> default: Waiting for machine to boot. This may take a few minutes...\r\n    default: SSH address: 127.0.0.1:2201\r\n    default: SSH username: vagrant\r\n    default: SSH auth method: private key\r\n    default: Warning: Connection timeout. Retrying...\r\n    default:\r\n    default: Vagrant insecure key detected. Vagrant will automatically replace\r\n    default: this with a newly generated keypair for better security.\r\n    default:\r\n    default: Inserting generated public key within guest...\r\n    default: Removing insecure key from the guest if its present...\r\n    default: Key inserted! Disconnecting and reconnecting using new SSH key...\r\n==> default: Machine booted and ready!\r\n````\r\n\r\n#### Playing around\r\nNow that the VM has been created, configured, and provisioned, feel free to log onto the VM and play around.\r\n\r\n    vagrant ssh\r\n\r\nVagrant requires from default settings in order for it to interact with the VM. Here are a few requirements:\r\n\r\n* vagrant username with a password of vagrant\r\n* vagrant user is configured for password-less sudo\r\n\r\nA full list of the requirements can be found [here](http://docs.vagrantup.com/v2/boxes/base.html)\r\n\r\nOnce you are done playing inside the VM, you can exit and shutdown the VM.\r\n\r\n    exit\r\n    vagrant halt\r\n\r\nYou can also control the VM from the command line:\r\n\r\n**Startup**\r\n\r\n    vagrant up\r\n    \r\n**Suspend**\r\n\r\n    vagrant suspend\r\n    \r\n**Shutdown**\r\n\r\n    vagrant halt\r\n    \r\n**Destroy**\r\n\r\n    vagrant destroy\r\n\r\n#### Further Reading\r\n\r\nYou can specify memory and cpu settings for each provider.\r\n\r\n````\r\n  config.vm.provider \"virtualbox\" do |vb|\r\n    vb.cpus = 2\r\n    vb.memory = 512\r\n  end\r\n\r\n  config.vm.provider \"parallels\" do |pl|\r\n    pl.cpus = 2\r\n    pl.memory = 512\r\n  end\r\n````\r\n\r\n* [Virtualbox Configuration](http://docs.vagrantup.com/v2/virtualbox/configuration.html) - Virtualbox-specific configuration\r\n* [Parallels Configuration](https://parallels.github.io/vagrant-parallels/docs/configuration.html) - Parallels-specific configuration\r\n* [Vagrant Documentation](http://docs.vagrantup.com/v2/) - Read more about Vagrant\r\n* [Vagrant Cloud](https://vagrantcloud.com/) - Find pre-built Vagrant boxes\r\n\r\n***\r\n\r\n### Example 2: Network\r\nWithout specifying a network in the Vagrantfile, the default may vary by provider. Vagrant allows the ability to configure a private network, a public (aka bridged) network, or do port forwarding.\r\n\r\nLet's create a Virtual Machine with a private network.\r\n\r\n    cd 2_networking\r\n    vagrant up\r\n\r\nThe Vagrantfile here differs from the VagrantFile in Example 1 by two lines:\r\n\r\n    config.vm.network \"private_network\", ip: \"192.168.50.2\"\r\n    config.vm.host_name = \"my-host\"\r\n\r\nThese two lines do a few things. First, Vagrant interacts with the VM Provider to create an additional network adapter:\r\n\r\n````\r\n==> default: Preparing network interfaces based on configuration...\r\n    default: Adapter 1: nat\r\n    default: Adapter 2: hostonly\r\n````\r\n\r\nThis can be confirmed by looking at the network settings for the VM.\r\n\r\nSecond, Vagrant interacts with the VM, to set the IP address and the hostname:\r\n\r\n````\r\n==> default: Setting hostname...\r\n==> default: Configuring and enabling network interfaces...\r\n````\r\n\r\n#### Playing around\r\nNow that the VM has been created, configured, and provisioned, feel free to log onto the VM and play around.\r\n\r\n    vagrant ssh\r\n\r\nTry looking at a few things, like the hostname or IP.\r\n\r\n    # Hostname\r\n    hostname\r\n    # IPs\r\n    ip addr show\r\n\r\nOnce you are done playing inside the VM, you can exit and shutdown the VM.\r\n\r\n    exit\r\n    vagrant halt\r\n\r\n#### Futher Reading\r\n* [Vagrant's network support](http://docs.vagrantup.com/v2/networking/index.html).\r\n\r\n***\r\n\r\n### Example 3: Synced Folders\r\nVagrant can sync folders from the Host OS into the VM. By default, Vagrant syncs the current working directory into the /vagrant folder on the VM.\r\n\r\nVagrant support other synchronization options - NFS, RSync, and SMB (windows host only) \r\n\r\nNOTE: These other options typically require 3rd party software installed or are OS specific.\r\n\r\nLet's create a Virtual Machine with a synced folder.\r\n\r\n    cd 3_syncedfolders\r\n    vagrant up\r\n\r\nThe Vagrantfile here differs from the VagrantFile in Example 1 by one line:\r\n\r\n    config.vm.synced_folder \"..\", \"/vagrant-examples-default\"\r\n\r\nAn additional entry is seen in the Vagrant output:\r\n\r\n````\r\n==> default: Mounting shared folders...\r\n    default: /vagrant => C:/temp/4BitBen-vagrant-examples-533ed11/3_syncedfolders\r\n    default: /vagrant-examples-default => C:/temp/4BitBen-vagrant-examples-533ed11\r\n````\r\n\r\n#### Playing around\r\nNow that the VM has been created, configured, and provisioned, feel free to log onto the VM and play around.\r\n\r\n    vagrant ssh\r\n\r\nLook at the contents of the /vagrant and /vagrant-examples-default.\r\n\r\n    ls /vagrant\r\n    ls /vagrant-examples-default\r\n    touch /vagrant/foo.bar\r\n    ls /vagrant\r\n    ls /vagrant-examples-default\r\n\r\nOnce you are done playing inside the VM, you can exit and shutdown the VM.\r\n\r\n    exit\r\n    vagrant halt\r\n\r\n#### Futher Reading\r\n* [Vagrant's synced folder support](http://docs.vagrantup.com/v2/synced-folders/).\r\n* [Comparing Filesystem Performance in VMs](http://mitchellh.com/comparing-filesystem-performance-in-virtual-machines) - Further look at sync folders\r\n\r\n***\r\n\r\n### Example 4: Provisioning\r\nVagrant can use multiple provisioning tools to configure the VM - install software, create users, etc. A few provisioners it supports are the following:\r\n* Shell Scripts\r\n* Ansible\r\n* Chef\r\n* Puppet\r\n* Salt\r\n* Many More...\r\n\r\nVagrant does not restrict the user to just one provisioner. Many provisioners can be defined and will be executed in order. \r\n\r\nLet's create a Virtual Machine with some provisioners.\r\n\r\n    cd 4_provision\r\n    vagrant up\r\n\r\nThe Vagrantfile here differs from the VagrantFile in Example 1 by a few lines:\r\n\r\n````\r\n  # Install Puppet\r\n  config.vm.provision \"shell\"  do |shell|\r\n    shell.inline = \"\r\nsudo rpm -ivh http://yum.puppetlabs.com/puppetlabs-release-el-7.noarch.rpm\r\nsudo yum install -y puppet\r\nsudo cp /vagrant/repo/nginx.repo /etc/yum.repos.d/\r\n\"\r\n  end\r\n\r\n  # Run Puppet Script\r\n  config.vm.provision \"puppet\"  do |puppet|\r\n    puppet.manifests_path = \"puppet\"\r\n    puppet.manifest_file = \"default.pp\"\r\n  end\r\n\r\n  # Tell the user what to do\r\n  config.vm.provision \"shell\"  do |shell|\r\n    shell.inline = \"echo Complete! Bring your browser up and go to #{ip}\"\r\n  end\r\n````\r\n\r\nHere, three provisioners are defined:\r\n\r\n1. A shell script provisioner that installs puppet (since this Vagrant box does not come pre-packaged with puppet) as well as configures yum to look at the nginx repo.\r\n\r\n    ````\r\n    ==> default: Running provisioner: shell...\r\n        default: Running: inline script\r\n    ....\r\n    ````\r\n\r\n2. A puppet provisioner that runs default.pp (the contents of default.pp installs nginx and makes sure it is running as a linux service).\r\n\r\n    ````\r\n    ==> default: Running provisioner: puppet...\r\n    ==> default: Running Puppet with default.pp...\r\n    ==> default: Notice: Compiled catalog for localhost in environment production in 0.61 seconds\r\n    ==> default: Notice: /Stage[main]/Main/Package[nginx]/ensure: created\r\n    ==> default: Notice: /Stage[main]/Main/Service[nginx]/ensure: ensure changed 'stopped' to 'running'\r\n    ==> default: Notice: Finished catalog run in 19.35 seconds\r\n    ````\r\n\r\n3. A shell script provisioner that echos that everything is complete.\r\n\r\n    ````\r\n    ==> default: Running provisioner: shell...\r\n        default: Running: inline script\r\n    ==> default: Complete! Bring your browser up and go to 192.168.50.4\r\n    ````\r\n\r\n#### Playing around\r\nNow that the VM has been created, configured, and provisioned, feel free to log onto the VM and play around.\r\n\r\n    vagrant ssh\r\n\r\nOnce you are done playing inside the VM, you can exit and shutdown the VM.\r\n\r\n    exit\r\n    vagrant halt\r\n\r\n#### Futher Reading\r\n* [Vagrant's provisioning support](https://docs.vagrantup.com/v2/provisioning/).\r\n\r\n***\r\n\r\n### Example 5: Multi-Machine\r\nVagrant can manage multiple VMs from a single Vagrantfile. Configuration that is common to all VMs are provided at the top level, while configuration that is common to a particular VM is within that machine's configuration.\r\n\r\nLet's break down the Vagrantfile configuation.\r\n\r\n#### Machines\r\nThere are two machines that are defined here:\r\n\r\nA client\r\n````\r\n  config.vm.define \"client\" do |client|\r\n    client.vm.network \"private_network\", ip: \"192.168.50.50\"\r\n    client.vm.hostname = \"clienthost\"\r\n\r\n    client.vm.provision \"shell\"  do |shell|\r\n        shell.inline = \"echo Client Script\"\r\n    end\r\n  end\r\n````\r\n\r\nA server\r\n````\r\n  config.vm.define \"server\" do |server|\r\n    server.vm.network \"private_network\", ip: \"192.168.50.51\"\r\n    server.vm.hostname = \"serverhost\"\r\n\r\n    server.vm.provision \"shell\"  do |shell|\r\n      shell.inline = \"echo Server Script\"\r\n    end\r\n  end\r\n````\r\n\r\nIn addition to the two machines, some things are defined outside of the machines, which are common and applied to all machines. These common configurations are the following:\r\n\r\nThe Vagrant box to use:\r\n````\r\n  config.vm.box = \"boxcutter/centos71\"\r\n````\r\n\r\nA shell script\r\n````\r\n  config.vm.provision \"shell\"  do |shell|\r\n    shell.inline = \"echo Outer Script 1\"\r\n  end\r\n````\r\n\r\nAnother shell script\r\n````\r\n  config.vm.provision \"shell\"  do |shell|\r\n    shell.inline = \"echo Outer Script 2\"\r\n  end\r\n````\r\n\r\nA few things to note:\r\n* Vagrant creates a configuration per machine and uses the overall configuration (common and machine-specific) to create each machine's configuration. \r\n* Configuration is created outside-in. This means that machine-specific configuration can either override common configuration or add onto the common configuration.  \r\n\r\nA great example is the provisioners. Each machine has their own provisioner as well as the two common provisioners. Since configuration is created outside-in, the client machine is executed as 'Outer Script 1', 'Outer Script 2', and 'Client Script'.\r\n\r\nLet's create a multiple Virtual Machines:\r\n\r\n    cd 5_multimachine\r\n    vagrant up\r\n\r\nWith multiple machines, you can still use the same Vagrant commands. When run, they will apply to all VMs:\r\n\r\n    vagrant status\r\n\r\nYou can also specify a VM by its Vagrant name:\r\n\r\n    vagrant status server\r\n\r\n#### Playing around\r\nNow that the VM has been created, configured, and provisioned, feel free to log onto the VM and play around.\r\n\r\n    vagrant ssh client\r\n\r\nOnce you are done playing inside the VM, you can exit and shutdown the VM.\r\n\r\n    exit\r\n    vagrant halt\r\n\r\n#### Futher Reading\r\n* [Vagrant's multi-machine support](http://docs.vagrantup.com/v2/multi-machine/).\r\n\r\n***\r\n\r\n### A slight detour\r\nBefore we get into the last example, that ties all the individual pieces together, let's look at a few things with vagrant.\r\n\r\n#### Vagrant Boxes\r\nAs a reminder, a box is a base image that one can easily clone VMs from. You can view and manage vagrant boxes through the `vagrant box` command. e.g. listing downloaded boxes:\r\n\r\n    vagrant box list\r\n    \r\nAnd the output should be\r\n\r\n    boxcutter/centos71     (virtualbox, 1.0.15)\r\n\r\n#### Vagrant VMs\r\nYou can view and manage all vagrant VMs regardless of where you are through the `vagrant global-status` command.\r\n\r\n    vagrant global-status\r\n\r\nAnd the output should be \r\n\r\n````\r\nid       name    provider   state    directory\r\n-----------------------------------------------------------------------------------------------------\r\nee06f3d  default virtualbox poweroff C:/temp/4BitBen-vagrant-examples-533ed11/1_simple\r\nae18a0a  default virtualbox poweroff C:/temp/4BitBen-vagrant-examples-533ed11/2_networking\r\nc61ef53  default virtualbox poweroff C:/temp/4BitBen-vagrant-examples-533ed11/3_syncedfolders\r\ndaff296  default virtualbox poweroff C:/temp/4BitBen-vagrant-examples-533ed11/4_provision\r\naf981ed  client  virtualbox poweroff C:/temp/4BitBen-vagrant-examples-533ed11/5_multimachine\r\n17a8373  server  virtualbox poweroff C:/temp/4BitBen-vagrant-examples-533ed11/5_multimachine\r\n````\r\n\r\n#### Further Reading\r\n* [Vagrant CLI](http://docs.vagrantup.com/v2/cli/index.html) - Vagrant Command Line Interface\r\n\r\n\r\n***\r\n\r\n### Example 6: Bringing it all together\r\nIn this final example, We will create 5 VMs:\r\n* A client\r\n* A load balancer (via nginx)\r\n* Three servers\r\n\r\nThe client will run `curl` commands against the load balancer. The load balancer will balance between the three backend servers.\r\n\r\nLet's create a multiple Virtual Machines:\r\n\r\n    cd 6_example\r\n    vagrant up\r\n\r\nThis will create the 5 VMs. The load balancer and three servers will startup automatically. Log onto the client and begin running the script:\r\n\r\n    vagrant ssh client\r\n    /vagrant/client/ping.sh\r\n\r\nYou will start to see responses from the different servers:\r\n\r\n    pong 192.168.50.61\r\n    pong 192.168.50.62\r\n    pong 192.168.50.63\r\n    pong 192.168.50.61\r\n    pong 192.168.50.62\r\n    pong 192.168.50.63\r\n\r\nIn a separate window, go into the same directory and begin to take machines up and down and see how the load balancer reacts to servers going up and down.\r\n\r\n\r\n***\r\n\r\n### Conclusion\r\nCongratulations! Hopefully, you begin to understand the power of Vagrant and find it useful.","google":"UA-62489653-1","note":"Don't delete this file! It's used internally to help with page regeneration."}